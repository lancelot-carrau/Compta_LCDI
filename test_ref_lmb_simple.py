#!/usr/bin/env python3
"""
Test simple pour valider la correction des R√©f. LMB
"""

import pandas as pd
import sys
import os

# Ajouter le r√©pertoire parent au path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app import (
    detect_encoding, normalize_column_names, clean_text_data, 
    improve_journal_matching
)

# Chemins des fichiers
JOURNAL_PATH = r"c:\Users\Malo\Desktop\Compta LCDI\20250604-Journal.csv"
ORDERS_PATH = r"c:\Users\Malo\Desktop\Compta LCDI\orders_export_1 (1).csv"
TRANSACTIONS_PATH = r"c:\Users\Malo\Desktop\Compta LCDI\payment_transactions_export_1 (2).csv"

def test_ref_lmb_correction():
    """Test simple de la correction des R√©f. LMB"""
    
    print("=== TEST DE CORRECTION DES R√âF. LMB ===\n")
    
    # 1. Charger et pr√©parer les donn√©es
    print("1. Chargement des donn√©es...")
    
    # Journal
    journal_encoding = detect_encoding(JOURNAL_PATH)
    df_journal = pd.read_csv(JOURNAL_PATH, encoding=journal_encoding, sep=';')
    
    # Commandes
    orders_encoding = detect_encoding(ORDERS_PATH)
    df_orders = pd.read_csv(ORDERS_PATH, encoding=orders_encoding)
    
    # Transactions
    transactions_encoding = detect_encoding(TRANSACTIONS_PATH)
    df_transactions = pd.read_csv(TRANSACTIONS_PATH, encoding=transactions_encoding)
    
    print(f"   ‚úì Journal: {len(df_journal)} lignes")
    print(f"   ‚úì Commandes: {len(df_orders)} lignes") 
    print(f"   ‚úì Transactions: {len(df_transactions)} lignes")
    
    # 2. Normalisation
    print("\n2. Normalisation des colonnes...")
    
    required_orders_cols = ['Name', 'Billing name', 'Financial Status', 'Outstanding Balance']
    required_transactions_cols = ['Order', 'Presentment Amount']
    required_journal_cols = ['Piece', 'R√©f√©rence LMB']
    
    df_orders = normalize_column_names(df_orders, required_orders_cols, "commandes")
    df_transactions = normalize_column_names(df_transactions, required_transactions_cols, "transactions")
    df_journal = normalize_column_names(df_journal, required_journal_cols, "journal")
    
    # 3. Nettoyage
    print("\n3. Nettoyage...")
    
    df_orders = clean_text_data(df_orders, ['Name', 'Billing name'])
    df_transactions = clean_text_data(df_transactions, ['Order'])
    df_journal = clean_text_data(df_journal, ['Piece', 'R√©f√©rence LMB'])
    
    # 4. Fusion √©tape 1 : Commandes + Transactions
    print("\n4. Fusion commandes + transactions...")
    
    df_merged_step1 = pd.merge(df_orders, df_transactions, 
                               left_on='Name', right_on='Order', how='left')
    print(f"   ‚úì {len(df_merged_step1)} lignes apr√®s fusion")
    
    # 5. Fusion √©tape 2 : + Journal (LOGIQUE CORRIG√âE)
    print("\n5. Fusion avec journal (logique corrig√©e)...")
    
    df_merged_final = improve_journal_matching(df_merged_step1, df_journal)
    
    # 6. Analyse des r√©sultats
    print("\n6. Analyse des r√©sultats...")
    
    total_lines = len(df_merged_final)
    lmb_found = df_merged_final['R√©f√©rence LMB'].notna().sum()
    percentage = (lmb_found / total_lines) * 100
    
    print(f"   üìä R√âSULTATS:")
    print(f"      - Total de lignes: {total_lines}")
    print(f"      - R√©f. LMB trouv√©es: {lmb_found}")
    print(f"      - Pourcentage: {percentage:.1f}%")
    
    # 7. Comparaison avec l'ancien r√©sultat
    print(f"\n   üìà COMPARAISON:")
    print(f"      - Avant correction: ~14% (6/42)")
    print(f"      - Apr√®s correction: {percentage:.1f}% ({lmb_found}/{total_lines})")
    
    if percentage > 50:
        improvement = percentage / 14.3
        print(f"      - Am√©lioration: +{improvement:.1f}x (√ó{improvement:.1f})")
        print(f"      üéâ SUCC√àS: Am√©lioration majeure !")
    elif percentage > 30:
        print(f"      ‚úÖ BIEN: Am√©lioration significative")
    else:
        print(f"      ‚ö†Ô∏è MOYEN: Am√©lioration limit√©e")
    
    # 8. Exemples de correspondances
    print(f"\n   üìù EXEMPLES DE CORRESPONDANCES:")
    
    # Avec LMB
    with_lmb = df_merged_final[df_merged_final['R√©f√©rence LMB'].notna()]
    if len(with_lmb) > 0:
        print(f"      Avec R√©f. LMB:")
        for i, row in with_lmb.head(3).iterrows():
            print(f"        {row['Name']} -> {row['R√©f√©rence LMB']} ({row['Billing name']})")
    
    # Sans LMB
    without_lmb = df_merged_final[df_merged_final['R√©f√©rence LMB'].isna()]
    if len(without_lmb) > 0:
        print(f"      Sans R√©f. LMB:")
        for i, row in without_lmb.head(3).iterrows():
            print(f"        {row['Name']} -> (pas de LMB) ({row['Billing name']})")
    
    # 9. D√©tails sur les non-correspondances
    print(f"\n   üîç ANALYSE DES NON-CORRESPONDANCES:")
    
    # Commandes r√©centes vs journal ancien
    orders_refs = set(df_orders['Name'].dropna())
    journal_refs = set(df_journal['Piece'].dropna())
    
    # Normaliser pour comparaison
    orders_normalized = {ref if str(ref).startswith('#') else f"#{ref}" for ref in orders_refs}
    journal_normalized = {ref if str(ref).startswith('#') else f"#{ref}" for ref in journal_refs}
    
    common_refs = orders_normalized & journal_normalized
    orders_only = orders_normalized - journal_normalized
    
    print(f"      - Correspondances th√©oriques: {len(common_refs)}")
    print(f"      - Commandes r√©centes non dans journal: {len(orders_only)}")
    
    if len(orders_only) > 0:
        print(f"      - Exemples commandes r√©centes: {list(orders_only)[:3]}")
        print(f"      üí° Recommandation: Utiliser un journal plus r√©cent")
    
    # 10. Conclusion
    print(f"\n=== CONCLUSION ===")
    
    if percentage >= 50:
        print(f"üéâ CORRECTION R√âUSSIE !")
        print(f"   - Passage de 14% √† {percentage:.1f}% de R√©f. LMB")
        print(f"   - Am√©lioration de +{(percentage/14.3):.1f}x")
        print(f"   - La logique de fusion fonctionne correctement")
        print(f"   - Seul le d√©calage temporel journal/commandes limite le r√©sultat")
    else:
        print(f"‚ö†Ô∏è AM√âLIORATION PARTIELLE")
        print(f"   - Passage de 14% √† {percentage:.1f}%")
        print(f"   - Probl√®me persistant √† investiguer")
    
    return percentage

if __name__ == "__main__":
    test_ref_lmb_correction()
