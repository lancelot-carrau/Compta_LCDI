#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import sys
import os
import re
from datetime import datetime

# Ajouter le r√©pertoire courant au path pour importer les modules
sys.path.append(os.getcwd())

from app import extract_pdf_text, extract_date_from_paid_box, parse_amazon_invoice_data, parse_date_string

def debug_fr5000fshcvzjc_date():
    """Debug sp√©cifique pour FR5000FSHCVZJC - analyser la priorit√© des dates"""
    
    # Trouver le fichier FR5000FSHCVZJC
    uploads_dir = os.path.join(os.getcwd(), 'uploads')
    target_file = None
    
    for filename in os.listdir(uploads_dir):
        if 'FR5000FSHCVZJC' in filename and filename.endswith('.pdf'):
            target_file = filename
            break
    
    if not target_file:
        print("‚ùå Fichier FR5000FSHCVZJC non trouv√©")
        print("üìÇ Fichiers disponibles:")
        for f in os.listdir(uploads_dir):
            if f.endswith('.pdf'):
                print(f"   - {f}")
        return
    
    pdf_path = os.path.join(uploads_dir, target_file)
    
    print(f"üîç ANALYSE D√âTAILL√âE DE {target_file}")
    print(f"üìÇ Chemin: {pdf_path}")
    print("=" * 80)
    
    # Extraire le texte complet
    text = extract_pdf_text(pdf_path)
    
    if not text:
        print("‚ùå Impossible d'extraire le texte du PDF")
        return
    
    print(f"üìÑ Texte extrait: {len(text)} caract√®res")
    print(f"üìÑ Extrait du texte (premiers 300 chars):")
    print(text[:300])
    print("\n" + "=" * 80)
    
    # Rechercher TOUTES les dates dans le texte
    print("üîç RECHERCHE DE TOUTES LES DATES DANS LE TEXTE:")
    print("-" * 50)
    
    # Pattern pour dates num√©riques
    numeric_date_pattern = r'(\d{1,2})[/\-\.](\d{1,2})[/\-\.](\d{4})'
    numeric_matches = re.findall(numeric_date_pattern, text)
    
    print(f"Dates num√©riques trouv√©es: {len(numeric_matches)}")
    for i, (d1, d2, year) in enumerate(numeric_matches):
        print(f"  {i+1}. {d1}-{d2}-{year}")
        formatted = parse_date_string(f"{d1}-{d2}-{year}")
        print(f"     ‚Üí Format√©: {formatted}")
    
    # Pattern pour dates avec mois en texte fran√ßais
    french_date_pattern = r'(\d{1,2})\s+(janvier|f√©vrier|mars|avril|mai|juin|juillet|ao√ªt|septembre|octobre|novembre|d√©cembre)\s+(\d{4})'
    french_matches = re.findall(french_date_pattern, text, re.IGNORECASE)
    
    print(f"\nDates fran√ßaises trouv√©es: {len(french_matches)}")
    for i, (day, month, year) in enumerate(french_matches):
        print(f"  {i+1}. {day} {month} {year}")
        formatted = parse_date_string((day, month, year))
        print(f"     ‚Üí Format√©: {formatted}")
    
    print("\n" + "=" * 80)
    
    # Analyser les contextes de date de note de cr√©dit
    print("üîç ANALYSE DES CONTEXTES DE DATE DE NOTE DE CR√âDIT:")
    print("-" * 50)
    
    credit_note_date_keywords = [
        'Date d\'√©mission de l\'avoir', 'Creditnotadatum', 'Data emissione nota di credito',
        'Fecha de emisi√≥n de la nota de cr√©dito', 'Credit note date', 'Gutschrift Datum',
        'Datum van de creditnota', 'Date de la note de cr√©dit', 'Data nota di credito'
    ]
    
    found_credit_dates = []
    
    for keyword in credit_note_date_keywords:
        keyword_pattern = re.escape(keyword)
        for keyword_match in re.finditer(keyword_pattern, text, re.IGNORECASE):
            # R√©cup√©rer 200 caract√®res apr√®s le mot-cl√©
            start = keyword_match.end()
            end = min(len(text), start + 200)
            context = text[start:end]
            
            print(f"\nüìç Contexte trouv√© pour '{keyword}':")
            print(f"   Position: {keyword_match.start()}-{keyword_match.end()}")
            print(f"   Contexte (200 chars): {repr(context[:100])}...")
            
            # Recherche de dates dans ce contexte
            date_pattern = r'(\d{1,2})\s+([a-zA-Z√Ä-√ø]+)\s+(\d{4})'
            date_matches = re.findall(date_pattern, context, re.IGNORECASE)
            
            for day, month_name, year in date_matches:
                found_credit_dates.append((keyword, day, month_name, year, keyword_match.start()))
                print(f"   ‚úÖ Date trouv√©e: {day} {month_name} {year}")
                formatted = parse_date_string((day, month_name, year))
                print(f"      ‚Üí Format√©: {formatted}")
            
            # Recherche de dates num√©riques
            numeric_date_pattern = r'(\d{1,2})[/\-\.](\d{1,2})[/\-\.](\d{4})'
            numeric_matches = re.findall(numeric_date_pattern, context)
            
            for day, month, year in numeric_matches:
                found_credit_dates.append((keyword, day, month, year, keyword_match.start()))
                print(f"   ‚úÖ Date num√©rique trouv√©e: {day}-{month}-{year}")
                formatted = parse_date_string(f"{day}-{month}-{year}")
                print(f"      ‚Üí Format√©: {formatted}")
    
    if not found_credit_dates:
        print("   ‚ùå Aucune date de note de cr√©dit trouv√©e")
    
    print("\n" + "=" * 80)
    
    # Analyser les contextes de date de facturation
    print("üîç ANALYSE DES CONTEXTES DE DATE DE FACTURATION:")
    print("-" * 50)
    
    invoice_date_keywords = [
        'Data di fatturazione', 'Date de la facture', 'Invoice date', 'Fecha de la factura',
        'Factuurdatum', 'Rechnungsdatum', 'Data fattura', 'Date facture'
    ]
    
    found_invoice_dates = []
    
    for keyword in invoice_date_keywords:
        keyword_pattern = re.escape(keyword)
        for keyword_match in re.finditer(keyword_pattern, text, re.IGNORECASE):
            # R√©cup√©rer 200 caract√®res apr√®s le mot-cl√©
            start = keyword_match.end()
            end = min(len(text), start + 200)
            context = text[start:end]
            
            print(f"\nüìç Contexte trouv√© pour '{keyword}':")
            print(f"   Position: {keyword_match.start()}-{keyword_match.end()}")
            print(f"   Contexte (200 chars): {repr(context[:100])}...")
            
            # Recherche de dates dans ce contexte
            date_pattern = r'(\d{1,2})\s+([a-zA-Z√Ä-√ø]+)\s+(\d{4})'
            date_matches = re.findall(date_pattern, context, re.IGNORECASE)
            
            for day, month_name, year in date_matches:
                found_invoice_dates.append((keyword, day, month_name, year, keyword_match.start()))
                print(f"   ‚úÖ Date trouv√©e: {day} {month_name} {year}")
                formatted = parse_date_string((day, month_name, year))
                print(f"      ‚Üí Format√©: {formatted}")
            
            # Recherche de dates num√©riques
            numeric_date_pattern = r'(\d{1,2})[/\-\.](\d{1,2})[/\-\.](\d{4})'
            numeric_matches = re.findall(numeric_date_pattern, context)
            
            for day, month, year in numeric_matches:
                found_invoice_dates.append((keyword, day, month, year, keyword_match.start()))
                print(f"   ‚úÖ Date num√©rique trouv√©e: {day}-{month}-{year}")
                formatted = parse_date_string(f"{day}-{month}-{year}")
                print(f"      ‚Üí Format√©: {formatted}")
    
    if not found_invoice_dates:
        print("   ‚ùå Aucune date de facturation trouv√©e")
    
    print("\n" + "=" * 80)
    
    # Analyser les contextes "Pay√©"/"Rembours√©"
    print("üîç ANALYSE DES CONTEXTES 'PAY√â'/'REMBOURS√â':")
    print("-" * 50)
    
    paid_keywords = [
        'pay√©', 'paid', 'betaald', 'pagato', 'pagado', 'bezahlt',
        'rembours√©', 'refunded', 'terugbetaald', 'rimborsato', 'reembolsado', 'erstattet'
    ]
    
    found_paid_dates = []
    keywords_pattern = '|'.join(paid_keywords)
    
    for keyword_match in re.finditer(f'({keywords_pattern})', text, re.IGNORECASE):
        # R√©cup√©rer 200 caract√®res autour du mot-cl√©
        start = max(0, keyword_match.start() - 100)
        end = min(len(text), keyword_match.end() + 100)
        context = text[start:end]
        
        print(f"\nüìç Contexte trouv√© pour '{keyword_match.group()}':")
        print(f"   Position: {keyword_match.start()}-{keyword_match.end()}")
        print(f"   Contexte (200 chars): {repr(context[:100])}...")
        
        # Recherche de dates dans ce contexte
        date_pattern = r'(\d{1,2})\s+([a-zA-Z√Ä-√ø]+)\s+(\d{4})'
        date_matches = re.findall(date_pattern, context, re.IGNORECASE)
        
        for day, month_name, year in date_matches:
            found_paid_dates.append((keyword_match.group(), day, month_name, year, keyword_match.start()))
            print(f"   ‚úÖ Date trouv√©e: {day} {month_name} {year}")
            formatted = parse_date_string((day, month_name, year))
            print(f"      ‚Üí Format√©: {formatted}")
        
        # Recherche de dates num√©riques
        numeric_date_pattern = r'(\d{1,2})[/\-\.](\d{1,2})[/\-\.](\d{4})'
        numeric_matches = re.findall(numeric_date_pattern, context)
        
        for day, month, year in numeric_matches:
            found_paid_dates.append((keyword_match.group(), day, month, year, keyword_match.start()))
            print(f"   ‚úÖ Date num√©rique trouv√©e: {day}-{month}-{year}")
            formatted = parse_date_string(f"{day}-{month}-{year}")
            print(f"      ‚Üí Format√©: {formatted}")
    
    if not found_paid_dates:
        print("   ‚ùå Aucune date 'Pay√©' trouv√©e")
    
    print("\n" + "=" * 80)
    
    # Test de la fonction extract_date_from_paid_box
    print("üß™ TEST DE LA FONCTION extract_date_from_paid_box:")
    print("-" * 50)
    
    extracted_date = extract_date_from_paid_box(text)
    print(f"Date extraite par la fonction: {extracted_date}")
    
    print("\n" + "=" * 80)
    
    # Test de l'extraction compl√®te
    print("üß™ TEST DE L'EXTRACTION COMPL√àTE:")
    print("-" * 50)
    
    result = parse_amazon_invoice_data(
        text=text, 
        debug_mode=True, 
        filename=target_file, 
        pdf_path=pdf_path
    )
    
    if result:
        print("‚úÖ Extraction r√©ussie:")
        for key, value in result.items():
            print(f"   {key}: {value}")
        
        print(f"\nüìÖ DATE EXTRAITE: {result.get('date_facture', 'AUCUNE')}")
        
        # Extraire la date du nom de fichier pour comparaison
        filename_date = target_file.split(' ')[4]  # Format: YYYY-MM-DD
        filename_date_formatted = filename_date.replace('-', '/')  # Format: YYYY/MM/DD
        # Inverser pour avoir DD/MM/YYYY
        date_parts = filename_date.split('-')
        if len(date_parts) == 3:
            filename_date_dd_mm_yyyy = f"{date_parts[2]}/{date_parts[1]}/{date_parts[0]}"
        else:
            filename_date_dd_mm_yyyy = filename_date_formatted
        
        print(f"üìÖ DATE DU NOM DE FICHIER: {filename_date_dd_mm_yyyy}")
        
        if result.get('date_facture') == filename_date_dd_mm_yyyy:
            print("‚úÖ SUCC√àS: Les dates correspondent")
        else:
            print("‚ùå DIVERGENCE: Les dates ne correspondent pas")
            print(f"   ‚Üí PDF: {result.get('date_facture')}")
            print(f"   ‚Üí Fichier: {filename_date_dd_mm_yyyy}")
    else:
        print("‚ùå √âchec de l'extraction")
    
    print("\n" + "=" * 80)
    
    # Analyse de la priorit√©
    print("üìä ANALYSE DE PRIORIT√â:")
    print("-" * 50)
    
    print("0. Dates trouv√©es dans les contextes de 'Date d'√©mission de note de cr√©dit':")
    if found_credit_dates:
        found_credit_dates.sort(key=lambda x: x[4])  # Trier par position
        for keyword, day, month, year, pos in found_credit_dates:
            print(f"   Position {pos}: {day} {month} {year} (contexte: {keyword})")
        print(f"   ‚Üí PRIORIT√â ABSOLUE: {found_credit_dates[0][1]} {found_credit_dates[0][2]} {found_credit_dates[0][3]}")
    else:
        print("   ‚ùå Aucune date de note de cr√©dit trouv√©e")
    
    print("\n1. Dates trouv√©es dans les contextes de 'Date de facturation':")
    if found_invoice_dates:
        found_invoice_dates.sort(key=lambda x: x[4])  # Trier par position
        for keyword, day, month, year, pos in found_invoice_dates:
            print(f"   Position {pos}: {day} {month} {year} (contexte: {keyword})")
        print(f"   ‚Üí PRIORIT√â 1: {found_invoice_dates[0][1]} {found_invoice_dates[0][2]} {found_invoice_dates[0][3]}")
    else:
        print("   ‚ùå Aucune date de facturation trouv√©e")
    
    print("\n2. Dates trouv√©es dans les contextes 'Pay√©':")
    if found_paid_dates:
        found_paid_dates.sort(key=lambda x: x[4])  # Trier par position
        for keyword, day, month, year, pos in found_paid_dates:
            print(f"   Position {pos}: {day} {month} {year} (contexte: {keyword})")
        print(f"   ‚Üí Fallback: {found_paid_dates[0][1]} {found_paid_dates[0][2]} {found_paid_dates[0][3]}")
    else:
        print("   ‚ùå Aucune date 'Pay√©' trouv√©e")

if __name__ == "__main__":
    debug_fr5000fshcvzjc_date()
