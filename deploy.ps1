# üöÄ Script de d√©ploiement PowerShell - LCDI App
# Usage: .\deploy.ps1 [heroku|render|railway]

param(
    [string]$Platform = "heroku"
)

Write-Host "üöÄ === D√âPLOIEMENT LCDI APP ===" -ForegroundColor Green
Write-Host ""

# V√©rifier si Git est initialis√©
if (-not (Test-Path ".git")) {
    Write-Host "‚ùå Erreur: Repository Git non initialis√©" -ForegroundColor Red
    Write-Host "üí° Ex√©cutez: git init && git remote add origin YOUR_REPO_URL" -ForegroundColor Yellow
    exit 1
}

# V√©rifier les fichiers n√©cessaires
Write-Host "üîç V√©rification des fichiers..." -ForegroundColor Cyan
$requiredFiles = @("app.py", "requirements.txt", "Procfile", "runtime.txt")
foreach ($file in $requiredFiles) {
    if (-not (Test-Path $file)) {
        Write-Host "‚ùå Fichier manquant: $file" -ForegroundColor Red
        exit 1
    }
}
Write-Host "‚úÖ Tous les fichiers requis sont pr√©sents" -ForegroundColor Green

# G√©n√©rer une cl√© secr√®te si n√©cessaire
if (-not (Test-Path ".env")) {
    Write-Host "üîê G√©n√©ration d'une cl√© secr√®te..." -ForegroundColor Cyan
    $secretKey = -join ((1..64) | ForEach-Object {'{0:X}' -f (Get-Random -Max 16)})
    @"
SECRET_KEY=$secretKey
FLASK_ENV=production
"@ | Out-File -FilePath ".env" -Encoding UTF8
    Write-Host "‚úÖ Fichier .env cr√©√©" -ForegroundColor Green
}

# Commit des changements
Write-Host "üìù Commit des changements..." -ForegroundColor Cyan
git add .
git status
$commitMessage = Read-Host "üìã Description du commit"
try {
    git commit -m $commitMessage
} catch {
    Write-Host "‚ö†Ô∏è Aucun changement √† commiter" -ForegroundColor Yellow
}

# Push vers GitHub
Write-Host "‚¨ÜÔ∏è Push vers GitHub..." -ForegroundColor Cyan
git push origin main

# Choix de la plateforme
switch ($Platform.ToLower()) {
    "heroku" {
        Write-Host "üî• D√©ploiement sur Heroku..." -ForegroundColor Magenta
        
        # V√©rifier Heroku CLI
        if (-not (Get-Command heroku -ErrorAction SilentlyContinue)) {
            Write-Host "‚ùå Heroku CLI non install√©" -ForegroundColor Red
            Write-Host "üí° Installez: https://devcenter.heroku.com/articles/heroku-cli" -ForegroundColor Yellow
            exit 1
        }

        # Cr√©er l'app si elle n'existe pas
        $appName = Read-Host "üì± Nom de l'app Heroku"
        try {
            heroku create $appName 2>$null
        } catch {
            Write-Host "‚ö†Ô∏è App existe d√©j√†" -ForegroundColor Yellow
        }

        # Configurer les variables d'environnement
        Write-Host "üîß Configuration des variables..." -ForegroundColor Cyan
        $secretKey = (Get-Content .env | Where-Object { $_ -match "SECRET_KEY=" }).Split("=")[1]
        heroku config:set SECRET_KEY="$secretKey" -a $appName
        heroku config:set FLASK_ENV="production" -a $appName
        heroku config:set MAX_CONTENT_LENGTH="50000000" -a $appName

        # D√©ployer
        git push heroku main
        
        Write-Host "üéâ D√©ploiement termin√©!" -ForegroundColor Green
        Write-Host "üåê URL: https://$appName.herokuapp.com" -ForegroundColor Cyan
        
        # Ouvrir l'app
        $openApp = Read-Host "üöÄ Ouvrir l'application? (y/N)"
        if ($openApp -eq "y" -or $openApp -eq "Y") {
            heroku open -a $appName
        }
    }
    
    "render" {
        Write-Host "üé® Instructions pour Render:" -ForegroundColor Magenta
        Write-Host "1. Allez sur https://render.com" -ForegroundColor White
        Write-Host "2. Connectez votre repository GitHub" -ForegroundColor White
        Write-Host "3. Choisissez 'Web Service'" -ForegroundColor White
        Write-Host "4. Configuration:" -ForegroundColor White
        Write-Host "   - Build Command: pip install -r requirements.txt" -ForegroundColor Gray
        Write-Host "   - Start Command: python app.py" -ForegroundColor Gray
        Write-Host "   - Variables d'environnement:" -ForegroundColor Gray
        $secretKey = (Get-Content .env | Where-Object { $_ -match "SECRET_KEY=" }).Split("=")[1]
        Write-Host "     SECRET_KEY=$secretKey" -ForegroundColor Gray
        Write-Host "     FLASK_ENV=production" -ForegroundColor Gray
    }
    
    "railway" {
        Write-Host "üöÇ D√©ploiement sur Railway..." -ForegroundColor Magenta
        
        if (-not (Get-Command railway -ErrorAction SilentlyContinue)) {
            Write-Host "‚ùå Railway CLI non install√©" -ForegroundColor Red
            Write-Host "üí° Installez: npm install -g @railway/cli" -ForegroundColor Yellow
            exit 1
        }

        railway login
        railway init
        railway up
        
        Write-Host "üéâ D√©ploiement termin√©!" -ForegroundColor Green
    }
    
    default {
        Write-Host "‚ùå Plateforme non support√©e: $Platform" -ForegroundColor Red
        Write-Host "üí° Plateformes support√©es: heroku, render, railway" -ForegroundColor Yellow
        exit 1
    }
}

Write-Host ""
Write-Host "‚úÖ === D√âPLOIEMENT TERMIN√â ===" -ForegroundColor Green
Write-Host "üìö Consultez DEPLOY.md pour plus d'informations" -ForegroundColor Cyan
