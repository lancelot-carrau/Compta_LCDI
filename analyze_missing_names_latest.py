#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import pandas as pd
import os
from pathlib import Path
import glob

def analyze_latest_excel():
    """Analyse le fichier Excel le plus r√©cent pour identifier les lignes avec des noms manquants"""
    
    # Cherche le fichier Excel le plus r√©cent dans output/
    output_dir = Path("output")
    excel_files = list(output_dir.glob("*.xlsx"))
    excel_files.sort(key=os.path.getmtime, reverse=True)
    
    if not excel_files:
        print("‚ùå Aucun fichier Excel trouv√© dans output/")
        return
    
    latest_file = excel_files[0]
    print(f"üìä Analyse du fichier: {latest_file}")
    print("=" * 80)
    
    try:
        # Lit le fichier Excel
        df = pd.read_excel(latest_file)
        print(f"üìÑ Nombre total de lignes: {len(df)}")
        
        # Affiche les colonnes
        print(f"üìã Colonnes: {list(df.columns)}")
        print()
        
        # Cherche la colonne client (peut avoir diff√©rents noms)
        client_col = None
        for col in df.columns:
            if 'client' in col.lower() or 'nom' in col.lower() or 'customer' in col.lower():
                client_col = col
                break
        
        if not client_col:
            print("‚ö†Ô∏è  Colonne client non trouv√©e. Colonnes disponibles:")
            for i, col in enumerate(df.columns):
                print(f"  {i}: {col}")
            return
        
        print(f"üë§ Colonne client identifi√©e: '{client_col}'")
        print()
        
        # Identifie les lignes avec des noms manquants ou vides
        missing_names = df[df[client_col].isna() | (df[client_col].str.strip() == '')]
        
        print(f"‚ùå Lignes avec noms manquants: {len(missing_names)}")
        
        if len(missing_names) > 0:
            print("\nüìã D√©tail des lignes avec noms manquants:")
            print("=" * 60)            
            for i, (idx, row) in enumerate(missing_names.iterrows()):
                print(f"\nüîç Ligne {i + 1}:")  # Num√©rotation simple
                for col in df.columns:
                    value = row[col]
                    if pd.isna(value):
                        value = "[VIDE]"
                    print(f"  {col}: {value}")
                print("-" * 40)
        
        # Statistiques g√©n√©rales
        print(f"\nüìä STATISTIQUES:")
        print(f"  ‚Ä¢ Total lignes: {len(df)}")
        print(f"  ‚Ä¢ Noms pr√©sents: {len(df) - len(missing_names)}")
        print(f"  ‚Ä¢ Noms manquants: {len(missing_names)}")
        print(f"  ‚Ä¢ Taux de succ√®s: {((len(df) - len(missing_names)) / len(df) * 100):.1f}%")
        
        # Affiche quelques exemples de noms extraits avec succ√®s
        successful_names = df[~(df[client_col].isna() | (df[client_col].str.strip() == ''))]
        if len(successful_names) > 0:
            print(f"\n‚úÖ Exemples de noms extraits avec succ√®s:")
            for i, name in enumerate(successful_names[client_col].head(10)):
                print(f"  ‚Ä¢ {name}")
                if i >= 9:  # Limite √† 10 exemples
                    break
        
    except Exception as e:
        print(f"‚ùå Erreur lors de l'analyse: {e}")

if __name__ == "__main__":
    analyze_latest_excel()
