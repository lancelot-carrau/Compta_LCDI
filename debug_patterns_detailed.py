#!/usr/bin/env python3
"""
Debug d√©taill√© des patterns pour comprendre l'ordre d'ex√©cution
"""
import re

# Texte du probl√®me ADF INFORMATIQUE
text = """Total √† payer 229,66 ‚Ç¨ADF INFORMATIQUE
20 % 191,38 ‚Ç¨ 38,28 ‚Ç¨
Total 191,38 ‚Ç¨ 38,28 ‚Ç¨
Veuillez vous r√©f√©rer √† la premi√®re page pour les informations de paiementMontant d√ª 229,66 ‚Ç¨
ASIN: B0B4P5S94P2 95,69 ‚Ç¨ 20 % 114,83 ‚Ç¨ 229,66 ‚Ç¨"""

print("üîç DEBUG D√âTAILL√â DES PATTERNS HT")
print("=" * 60)
print("Texte √† analyser:")
print(text)
print("=" * 60)

# Patterns de subtotal (HT) dans l'ordre d'ex√©cution
subtotal_patterns = [
    # PATTERNS PRIORITAIRES pour tableaux HT/TVA sur m√™me ligne
    (r'Total\s+(\d+[,.]?\d{0,2})\s*‚Ç¨\s+\d+[,.]?\d{0,2}\s*‚Ç¨', "Pattern fran√ßais Total HT TVA (priorit√© 1)"),
    (r'Sous-total\s+(\d+[,.]?\d{0,2})\s*‚Ç¨\s+\d+[,.]?\d{0,2}\s*‚Ç¨', "Pattern fran√ßais Sous-total HT TVA (priorit√© 2)"),
    (r'(\d+)%\s+([\d,]+)\s*‚Ç¨\s+[\d,]+\s*‚Ç¨', "Pattern italien % HT TVA (priorit√© 3)"),
    
    # Patterns PRIORITAIRES pour montant HT 
    (r'Totale\s*prima\s*delle\s*tasse[^‚Ç¨]*‚Ç¨\s*(\d+[,.]?\d{0,2})', "Pattern italien Totale prima delle tasse"),
    (r'Subtotale\s*articoli[^‚Ç¨]*‚Ç¨\s*(\d+[,.]?\d{0,2})', "Pattern italien Subtotale articoli"),
    
    # NOUVEAUX PATTERNS pour factures fran√ßaises/anglaises
    (r'(?:Items|Articles)[^‚Ç¨]*‚Ç¨\s*(\d+[,.]?\d{0,2})', "Pattern Items/Articles"),
    (r'Order\s*Subtotal[^‚Ç¨]*‚Ç¨\s*(\d+[,.]?\d{0,2})', "Pattern Order Subtotal"),
    (r'Subtotal\s*before\s*tax[^‚Ç¨]*‚Ç¨\s*(\d+[,.]?\d{0,2})', "Pattern Subtotal before tax"),
    (r'Total\s*before\s*VAT[^‚Ç¨]*‚Ç¨\s*(\d+[,.]?\d{0,2})', "Pattern Total before VAT"),
    (r'Montant\s*avant\s*taxe[^‚Ç¨]*‚Ç¨\s*(\d+[,.]?\d{0,2})', "Pattern Montant avant taxe"),
    (r'Total\s*avant\s*TVA[^‚Ç¨]*‚Ç¨\s*(\d+[,.]?\d{0,2})', "Pattern Total avant TVA"),
    
    # Patterns g√©n√©riques
    (r'Subtotale[^‚Ç¨]*‚Ç¨\s*(\d+[,.]?\d{0,2})', "Pattern Subtotale g√©n√©rique"),
    (r'Subtotal[^‚Ç¨]*‚Ç¨\s*(\d+[,.]?\d{0,2})', "Pattern Subtotal g√©n√©rique"),
    (r'Sous-total[^‚Ç¨]*‚Ç¨\s*(\d+[,.]?\d{0,2})', "Pattern Sous-total g√©n√©rique"),
    (r'Sub-total[^‚Ç¨]*‚Ç¨\s*(\d+[,.]?\d{0,2})', "Pattern Sub-total g√©n√©rique"),
    (r'Net\s*Amount[^‚Ç¨]*‚Ç¨\s*(\d+[,.]?\d{0,2})', "Pattern Net Amount"),
    (r'Montant\s*HT[^‚Ç¨]*‚Ç¨\s*(\d+[,.]?\d{0,2})', "Pattern Montant HT"),
    
    # Patterns avec deux points
    (r'(?:Subtotale|Subtotal|Sous-total|Sub-total|Items|Articles)[:\s]+(\d+[,.]?\d{0,2})\s*‚Ç¨', "Pattern avec : variante 1"),
    (r'(?:Net\s*Amount|Montant\s*HT|Order\s*Subtotal)[:\s]+(\d+[,.]?\d{0,2})\s*‚Ç¨', "Pattern avec : variante 2"),
    (r'(?:Total\s*before|Montant\s*avant|Subtotal\s*before)[^‚Ç¨]*[:\s]+(\d+[,.]?\d{0,2})\s*‚Ç¨', "Pattern avec : variante 3"),
    
    # PATTERNS DE FALLBACK
    (r'(\d+[,.]?\d{0,2})\s*‚Ç¨[^‚Ç¨]*(?:before|avant)\s*(?:tax|VAT|TVA|IVA)', "Fallback before tax"),
    (r'(\d+[,.]?\d{0,2})\s*‚Ç¨[^‚Ç¨]*(?:excluding|hors|excl\.?)\s*(?:VAT|TVA|IVA)', "Fallback excluding VAT"),
    (r'(\d+[,.]?\d{0,2})\s*‚Ç¨[^‚Ç¨\n]{0,20}?(?:\d+[,.]?\d*)\s*%', "Fallback montant + %"),
]

print("Testis de chaque pattern:")
print()

for i, (pattern, description) in enumerate(subtotal_patterns, 1):
    matches = list(re.finditer(pattern, text, re.IGNORECASE | re.MULTILINE))
    if matches:
        print(f"{i:2d}. ‚úÖ {description}")
        for match in matches:
            if len(match.groups()) == 1:
                print(f"     üéØ Match: '{match.group(1)}' (dans: '{match.group(0)}')")
            elif len(match.groups()) == 2:
                print(f"     üéØ Match: Groupe 1='{match.groups()[0]}', Groupe 2='{match.groups()[1]}' (dans: '{match.group(0)}')")
                # Pour les patterns √† 2 groupes, indiquer lequel est utilis√© selon la logique
                if 'Total\\s+' in pattern and '‚Ç¨\\s+\\d+' in pattern:
                    print(f"     ‚û°Ô∏è  HT utilis√©: {match.groups()[0]} (pattern fran√ßais, groupe 1)")
                else:
                    print(f"     ‚û°Ô∏è  HT utilis√©: {match.groups()[1]} (pattern italien, groupe 2)")
        print()
    else:
        print(f"{i:2d}. ‚ùå {description}")

print("\nüéØ CONCLUSION:")
print("Le premier pattern qui match dans l'ordre ci-dessus sera utilis√© pour extraire le HT.")
