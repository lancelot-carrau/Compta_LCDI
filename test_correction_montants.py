#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Script de test pour v√©rifier la correction du probl√®me de duplication des montants
lors de r√©f√©rences multiples dans le journal.

Ce script teste sp√©cifiquement le cas LCDI-1020 et LCDI-1021 pour s'assurer que :
1. Les deux commandes re√ßoivent bien la m√™me R√©f. LMB du journal
2. Chaque commande garde ses montants individuels (pas de duplication)
3. La somme des montants des deux commandes correspond au montant total du journal
"""

import pandas as pd
import sys
import os

# Ajouter le dossier parent au chemin pour importer app.py
current_dir = os.path.dirname(os.path.abspath(__file__))
sys.path.append(current_dir)

from app import improve_journal_matching, calculate_corrected_amounts

def test_correction_montants_multiples():
    """Test la correction du probl√®me de duplication des montants"""
    print("=== TEST CORRECTION MONTANTS MULTIPLES ===\n")
    
    # Cr√©er des donn√©es de test
    print("1. Cr√©ation des donn√©es de test...")
    
    # Donn√©es des commandes (2 commandes s√©par√©es)
    df_orders = pd.DataFrame({
        'Name': ['#LCDI-1020', '#LCDI-1021'],
        'Total': [2067.9, 15.9],  # Montants individuels
        'Taxes': [344.65, 2.65],  # TVA individuelle
        'Billing name': ['Client Test 1', 'Client Test 2'],
        'Financial Status': ['paid', 'paid'],
        'Payment Method': ['Virement bancaire', 'PayPal']
    })
    
    # Donn√©es du journal (1 ligne avec r√©f√©rence multiple)
    df_journal = pd.DataFrame({
        'Piece': ['LCDI-1020 LCDI-1021'],  # R√©f√©rence multiple
        'R√©f√©rence LMB': ['LMB-2024-001'],
        'Montant du document TTC': ['2083,8'],  # Montant total (somme des deux commandes)
        'Montant du document HT': ['1736,5']   # HT total
    })
    
    print(f"   - Commandes: {len(df_orders)} lignes")
    print(f"     * LCDI-1020: {df_orders.loc[0, 'Total']} ‚Ç¨ TTC")
    print(f"     * LCDI-1021: {df_orders.loc[1, 'Total']} ‚Ç¨ TTC")
    print(f"   - Journal: {len(df_journal)} lignes")
    print(f"     * R√©f√©rence multiple: {df_journal.loc[0, 'Piece']}")
    print(f"     * Montant total journal: {df_journal.loc[0, 'Montant du document TTC']} ‚Ç¨")
    
    # Test de la fusion am√©lior√©e
    print("\n2. Test de la fusion am√©lior√©e...")
    df_merged = improve_journal_matching(df_orders, df_journal)
    
    # V√©rifications de la fusion
    print("\n3. V√©rification de la fusion...")
    
    # V√©rifier que les deux commandes ont la R√©f. LMB
    ref_lmb_count = df_merged['R√©f√©rence LMB'].notna().sum()
    print(f"   ‚úì Commandes avec R√©f. LMB: {ref_lmb_count}/2")
    
    # V√©rifier que c'est la m√™me R√©f. LMB
    ref_lmb_unique = df_merged['R√©f√©rence LMB'].dropna().unique()
    print(f"   ‚úì R√©f. LMB partag√©e: {ref_lmb_unique}")
    
    # V√©rifier que les montants du journal ont √©t√© effac√©s (pour √©viter la duplication)
    montant_journal_ttc = df_merged['Montant du document TTC'].dropna()
    print(f"   ‚úì Montants TTC du journal (doivent √™tre None): {montant_journal_ttc.tolist()}")
    
    # Test du calcul des montants corrig√©s
    print("\n4. Test du calcul des montants corrig√©s...")
    corrected_amounts = calculate_corrected_amounts(df_merged)
    
    # V√©rification des montants
    print("\n5. V√©rification des montants finaux...")
    
    for i, (index, row) in enumerate(df_merged.iterrows()):
        commande = row['Name']
        ttc_original = row['Total']
        ttc_final = corrected_amounts['TTC'].iloc[i]
        ht_final = corrected_amounts['HT'].iloc[i]
        tva_final = corrected_amounts['TVA'].iloc[i]
        ref_lmb = row['R√©f√©rence LMB']
        
        print(f"   {commande}:")
        print(f"     - R√©f. LMB: {ref_lmb}")
        print(f"     - TTC original: {ttc_original} ‚Ç¨")
        print(f"     - TTC final: {ttc_final} ‚Ç¨")
        print(f"     - HT final: {ht_final} ‚Ç¨")
        print(f"     - TVA final: {tva_final} ‚Ç¨")
        print(f"     - Montants pr√©serv√©s: {'‚úì' if ttc_final == ttc_original else '‚úó'}")
        print()
    
    # V√©rification globale
    print("6. V√©rification globale...")
    
    total_ttc_final = corrected_amounts['TTC'].sum()
    total_ttc_journal = 2083.8  # Montant attendu du journal
    
    print(f"   - Somme TTC finale: {total_ttc_final} ‚Ç¨")
    print(f"   - Montant TTC journal: {total_ttc_journal} ‚Ç¨")
    print(f"   - Coh√©rence: {'‚úì' if abs(total_ttc_final - total_ttc_journal) < 0.1 else '‚úó'}")
    
    # R√©sum√© du test
    print("\n=== R√âSUM√â DU TEST ===")
    
    success = True
    
    # Test 1: Les deux commandes ont la R√©f. LMB
    if ref_lmb_count == 2:
        print("‚úì Test 1 R√âUSSI: Les deux commandes ont re√ßu la R√©f. LMB")
    else:
        print("‚úó Test 1 √âCHOU√â: Toutes les commandes n'ont pas re√ßu la R√©f. LMB")
        success = False
    
    # Test 2: Montants individuels pr√©serv√©s
    montants_preserves = all(
        corrected_amounts['TTC'].iloc[i] == df_orders.iloc[i]['Total'] 
        for i in range(len(df_orders))
    )
    if montants_preserves:
        print("‚úì Test 2 R√âUSSI: Les montants individuels sont pr√©serv√©s")
    else:
        print("‚úó Test 2 √âCHOU√â: Les montants individuels ne sont pas pr√©serv√©s")
        success = False
    
    # Test 3: Somme coh√©rente
    if abs(total_ttc_final - total_ttc_journal) < 0.1:
        print("‚úì Test 3 R√âUSSI: La somme des montants est coh√©rente avec le journal")
    else:
        print("‚úó Test 3 √âCHOU√â: La somme des montants n'est pas coh√©rente")
        success = False
    
    if success:
        print("\nüéâ TOUS LES TESTS SONT R√âUSSIS!")
        print("   La correction du probl√®me de duplication des montants fonctionne correctement.")
    else:
        print("\n‚ùå CERTAINS TESTS ONT √âCHOU√â!")
        print("   La correction n√©cessite des ajustements suppl√©mentaires.")
    
    return success

if __name__ == "__main__":
    test_correction_montants_multiples()
