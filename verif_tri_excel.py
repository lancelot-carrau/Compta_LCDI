#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
V√©rification du tri par date dans le fichier Excel g√©n√©r√©
"""
import pandas as pd
import os
from datetime import datetime

# Chemin vers le fichier Excel le plus r√©cent
output_dir = "output"
excel_file = "Compta_LCDI_Amazon_23_06_2025_15_29_47.xlsx"  # Le dernier g√©n√©r√©
excel_path = os.path.join(output_dir, excel_file)

print(f"üìä V√©rification du tri par date dans : {excel_file}")
print("=" * 70)

try:
    # Lire le fichier Excel
    df = pd.read_excel(excel_path)
    print(f"‚úÖ Fichier Excel lu avec succ√®s")
    print(f"üìã Nombre de lignes : {len(df)}")
    print(f"üìã Colonnes : {list(df.columns)}")
    print()
    
    # Afficher les premi√®res lignes pour voir la structure
    print("üîç Premi√®res lignes du fichier Excel :")
    print("-" * 50)
    print(df.head(10).to_string(index=False))
    print()
    
    # Chercher les colonnes contenant des dates
    date_columns = []
    for col in df.columns:
        if 'date' in col.lower() or 'facture' in col.lower():
            date_columns.append(col)
    
    print(f"üìÖ Colonnes potentielles de date trouv√©es : {date_columns}")
    
    # Afficher les dates dans l'ordre d'apparition
    if date_columns:
        date_col = date_columns[0]  # Prendre la premi√®re colonne de date
        print(f"\nüìÖ Dates dans l'ordre d'apparition (colonne '{date_col}') :")
        print("-" * 50)
          dates_found = []
        for idx, row in df.iterrows():
            date_val = row[date_col]
            if pd.notna(date_val) and str(date_val).strip() != '':
                dates_found.append((int(idx), str(date_val)))
                print(f"Ligne {int(idx) + 1}: {date_val}")
        
        if dates_found:
            print(f"\nüìä Total de {len(dates_found)} dates trouv√©es")
            print("‚úÖ V√©rification du tri : les dates devraient √™tre dans l'ordre croissant")
            
            # V√©rifier si les dates sont tri√©es
            sorted_check = True
            for i in range(1, len(dates_found)):
                try:
                    date1 = datetime.strptime(dates_found[i-1][1], '%d/%m/%Y')
                    date2 = datetime.strptime(dates_found[i][1], '%d/%m/%Y')
                    if date1 > date2:
                        sorted_check = False
                        print(f"‚ùå Erreur de tri : {dates_found[i-1][1]} > {dates_found[i][1]}")
                        break
                except ValueError as e:
                    print(f"‚ö†Ô∏è  Erreur de format de date : {e}")
            
            if sorted_check:
                print("‚úÖ LE TRI PAR DATE EST CORRECT (plus ancienne en haut)")
            else:
                print("‚ùå LE TRI PAR DATE N'EST PAS CORRECT")
        else:
            print("‚ö†Ô∏è  Aucune date valide trouv√©e")
    else:
        print("‚ö†Ô∏è  Aucune colonne de date trouv√©e")
        
except Exception as e:
    print(f"‚ùå Erreur lors de la lecture du fichier Excel : {e}")
    print(f"Fichier : {excel_path}")
    print(f"Existe : {os.path.exists(excel_path)}")
